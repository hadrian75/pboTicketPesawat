package tiketpesawatcrud;

import java.awt.HeadlessException;
import java.sql.*;
import java.util.Date;
import java.sql.PreparedStatement;
import java.awt.Image;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author Durian
 */
public class crudPenerbangan extends javax.swing.JInternalFrame {
//private JSpinner startTimeSpinner;
//private JSpinner endTimeSpinner;
//
//private void addTimeChoosers() {
//    startTimeSpinner = createTimeSpinner();
//    endTimeSpinner = createTimeSpinner();
//
//    // Assuming you have panels for each spinner
//    this.startTimePanel.add(startTimeSpinner);
//    this.endTimePanel.add(endTimeSpinner);
//}
//
//private JSpinner createTimeSpinner() {
//    SpinnerDateModel model = new SpinnerDateModel();
//    model.setCalendarField(Calendar.HOUR_OF_DAY);
//    JSpinner spinner = new JSpinner(model);
//    JSpinner.DateEditor editor = new JSpinner.DateEditor(spinner, "HH:mm:ss");
//    spinner.setEditor(editor);
//    return spinner;
//}
//
//
//private String getTimeFromSpinner(JSpinner spinner) {
//    Date spinnerValue = (Date) spinner.getValue();
//    SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
//    return formatter.format(spinnerValue);
//}

    /**
     * Creates new form addCustomer
     */
    public crudPenerbangan() {
        initComponents();
//        addTimeChoosers();
        autoID();
        tampilDataRute();
        tampilDataPesawat();
        prepareCmbTerbang();
        prepareCmbRute();

    }
    
    koneksi dbKoneksi = new koneksi();

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
 
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        popupMenu1 = new java.awt.PopupMenu();
        jSpinFieldBeanInfo1 = new com.toedter.components.JSpinFieldBeanInfo();
        jSpinFieldBeanInfo2 = new com.toedter.components.JSpinFieldBeanInfo();
        dateUtil1 = new com.toedter.calendar.DateUtil();
        dateChooserPanelBeanInfo1 = new com.toedter.calendar.demo.DateChooserPanelBeanInfo();
        birthdayEvaluator1 = new com.toedter.calendar.demo.BirthdayEvaluator();
        birthdayEvaluator2 = new com.toedter.calendar.demo.BirthdayEvaluator();
        jDateChooserBeanInfo1 = new com.toedter.calendar.JDateChooserBeanInfo();
        jYearChooserBeanInfo1 = new com.toedter.calendar.JYearChooserBeanInfo();
        jLocaleChooserBeanInfo1 = new com.toedter.components.JLocaleChooserBeanInfo();
        jCalendarBeanInfo1 = new com.toedter.calendar.JCalendarBeanInfo();
        jCalendarBeanInfo2 = new com.toedter.calendar.JCalendarBeanInfo();
        jDateChooserBeanInfo2 = new com.toedter.calendar.JDateChooserBeanInfo();
        jDayChooserBeanInfo1 = new com.toedter.calendar.JDayChooserBeanInfo();
        jCalendarBeanInfo3 = new com.toedter.calendar.JCalendarBeanInfo();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnTambah = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtHarga = new javax.swing.JTextField();
        txtRute = new javax.swing.JTextField();
        spinJumlahKursi = new com.toedter.components.JSpinField();
        jLabel9 = new javax.swing.JLabel();
        tglBerangkat = new com.toedter.calendar.JDateChooser();
        txtNama = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbRute = new javax.swing.JTable();
        cmbCari = new javax.swing.JComboBox<>();
        txtCari = new java.awt.TextField();
        btnCari = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbTerbang = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        cmbCariPesawat = new javax.swing.JComboBox<>();
        txtCariPesawat = new java.awt.TextField();
        btnCariPesawat = new javax.swing.JButton();
        tanggalCari = new com.toedter.calendar.JDateChooser();

        popupMenu1.setLabel("popupMenu1");

        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        jLabel3.setText("Nama Pesawat");

        jLabel4.setText("Jumlah Kursi");

        jLabel5.setText("Harga");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        jLabel7.setText("Kode Rute");

        jLabel9.setText("Tanggal Berangkat");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("CRUD PENERBANGAN");

        txtId.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtId.setText("jLabel7");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtId)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3))
                                .addGap(36, 36, 36)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnTambah)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(btnExit))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtHarga, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tglBerangkat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                                .addComponent(spinJumlahKursi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtNama, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtRute))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnExit, btnHapus, btnReset, btnUpdate});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(spinJumlahKursi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tglBerangkat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(123, 123, 123))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnExit, btnHapus, btnReset, btnUpdate});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel5, jLabel7, txtHarga, txtRute});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel9, tglBerangkat});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel4, spinJumlahKursi});

        tbRute.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Kode Rute", "Asal", "Tujuan", "Waktu Berangkat ", "Waktu Tiba"
            }
        ));
        tbRute.setRowHeight(40);
        tbRute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbRuteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbRute);

        cmbCari.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "kode_rute", "nama" }));
        cmbCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCariActionPerformed(evt);
            }
        });

        txtCari.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariActionPerformed(evt);
            }
        });

        btnCari.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(204, 0, 102));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 102));
        jLabel6.setText("Cari Data Rute");

        tbTerbang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Kode Pesawat", "Nama Pesawat", "Jumlah Kursi", "Harga", "Tanggal Berangkat", "Kode Rute"
            }
        ));
        tbTerbang.setRowHeight(40);
        tbTerbang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbTerbangMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbTerbang);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 0, 51));
        jLabel8.setText("Cari Data Penerbangan");

        cmbCariPesawat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "kode_pesawat", "nama" }));
        cmbCariPesawat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCariPesawatActionPerformed(evt);
            }
        });

        txtCariPesawat.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtCariPesawat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariPesawatActionPerformed(evt);
            }
        });

        btnCariPesawat.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCariPesawat.setText("Cari");
        btnCariPesawat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariPesawatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCari))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(18, 18, 18)
                            .addComponent(cmbCariPesawat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(tanggalCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtCariPesawat, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCariPesawat))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCari, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCari, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbCariPesawat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnCariPesawat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCariPesawat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(tanggalCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCari, cmbCari});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCariActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed

        tampilDataRute();
        tampilDataPesawat();

    }//GEN-LAST:event_btnCariActionPerformed

    private void cmbCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCariActionPerformed
     
    }//GEN-LAST:event_cmbCariActionPerformed

    private void tbRuteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRuteMouseClicked
//try (Connection con = dbKoneksi.getConnection();
//     PreparedStatement pst = con.prepareStatement("SELECT kode_rute, asal, tujuan, waktu_kedatangan, waktu_tiba FROM pembeli WHERE id = ?")) {
//    int selectedRow = tbRute.getSelectedRow();
//    if (selectedRow >= 0) {
//        String id = tbRute.getValueAt(selectedRow, 0).toString();
//        pst.setString(1, id);
//        
//        try (ResultSet rs = pst.executeQuery()) {
//            if (rs.next()) {
//                txtId.setText(tbKamar.getValueAt(tbKamar.getSelectedRow(), 0).toString());
//                txtId.setText(kode);
//                String cmbAsal = tbRute.getValueAt(tbRute.getSelectedRow(), 1).toString();
//               for (int i = 0; i < localeAsal.getItemCount(); i++) {
//                 if (localeAsal.getItemAt(i).equals(cmbAsal)) {
//                  // Set the combo box to the matching item
//                  localeAsal.setSelectedIndex(i);
//                 break; // Exit the loop once the matching item is found
//            }
//             }
//      String cmbTujuan = tbRute.getValueAt(tbRute.getSelectedRow(), 1).toString();
//    for (int i = 0; i < localeTujuan.getItemCount(); i++) {
//    if (localeTujuan.getItemAt(i).equals(cmbTujuan)) {
//        // Set the combo box to the matching item
//        localeTujuan.setSelectedIndex(i);
//        break; // Exit the loop once the matching item is found
//    }
//  }
//            } else {
//                JOptionPane.showMessageDialog(this, "No data found for the selected ID.");
//            }
//        }
//    } else {
//        JOptionPane.showMessageDialog(this, "Please select a row to view details.");
//    }
//} catch (SQLException e) {
//    e.printStackTrace(); // Handle or log the exception appropriately
//}
  int selectedRow = tbRute.getSelectedRow();
if (selectedRow >= 0) {
    // Get data from tbRute
    String kodeRute = tbRute.getValueAt(selectedRow, 0).toString();

    txtRute.setText(kodeRute); // Or txtRute.setText(id);
    autoID();
} else {
    JOptionPane.showMessageDialog(this, "Please select a row to view details.");
}

    }//GEN-LAST:event_tbRuteMouseClicked

    private void tbTerbangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbTerbangMouseClicked
     int selectedRow = tbTerbang.getSelectedRow();
if (selectedRow >= 0) {
    // Get data from tbTerbang
    String id = tbTerbang.getValueAt(selectedRow, 0).toString();
    String nama = tbTerbang.getValueAt(selectedRow, 1).toString();
    int jumlahKursi = Integer.parseInt(tbTerbang.getValueAt(selectedRow, 2).toString());
    String tanggalBerangkatStr = tbTerbang.getValueAt(selectedRow, 4).toString(); // Assuming date is stored as String
    java.sql.Date tanggalBerangkat = java.sql.Date.valueOf(tanggalBerangkatStr);
    String harga = tbTerbang.getValueAt(selectedRow, 3).toString();
    String kodeRute = tbTerbang.getValueAt(selectedRow, 5).toString();

    txtId.setText(id);
    txtNama.setText(nama);
    spinJumlahKursi.setValue(jumlahKursi);
    txtHarga.setText(harga);
    txtRute.setText(kodeRute);
    tglBerangkat.setDate(tanggalBerangkat); // Assuming tglBerangkat is a JDateChooser component

} else {
    JOptionPane.showMessageDialog(this, "Please select a row to view details.");
}

    }//GEN-LAST:event_tbTerbangMouseClicked

    private void cmbCariPesawatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCariPesawatActionPerformed
        // TODO add your handling code here:
    
    }//GEN-LAST:event_cmbCariPesawatActionPerformed

    private void txtCariPesawatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariPesawatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCariPesawatActionPerformed

    private void btnCariPesawatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariPesawatActionPerformed
        // TODO add your handling code here:
        tampilDataPesawat();
    }//GEN-LAST:event_btnCariPesawatActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        // Get the data from the input fields
        String id = txtId.getText();
        String nama = txtNama.getText();
        java.util.Date tanggalBerangkat = tglBerangkat.getDate();
        java.sql.Date sqlTanggalBerangkat = new java.sql.Date(tanggalBerangkat.getTime());
        java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
        int jumlahKursi = (int) spinJumlahKursi.getValue();
        double harga = Double.parseDouble(txtHarga.getText());
        int kodeRute = Integer.parseInt(txtRute.getText());

        // Validate the input data
        if (id.isEmpty() || nama.isEmpty() || jumlahKursi == 0 || harga == 0.0 || kodeRute == 0  ) {
            JOptionPane.showMessageDialog(null, "Data Tidak Boleh Kosong", "Validasi Data", JOptionPane.INFORMATION_MESSAGE);
            return; // Exit the method if validation fails
        }
        if (sqlTanggalBerangkat.before(currentDate)) {
            JOptionPane.showMessageDialog(null, "Tanggal Berangkat tidak boleh lebih awal dari tanggal sekarang.", "Validasi Data", JOptionPane.INFORMATION_MESSAGE);
             resetForm();
            return; // Exit the method if the selected date is earlier than the current date
}

        // Insert data into the database
        try {
            con = dbKoneksi.getConnection();
            pst = con.prepareStatement("INSERT INTO penerbangan(kode_pesawat, nama_pesawat, jumlah_kursi, harga, tanggal_berangkat, kode_rute) VALUES (?, ?, ?, ?, ?, ?)");
            pst.setString(1, id);
            pst.setString(2, nama);
            pst.setInt(3, jumlahKursi);
            pst.setDouble(4, harga);
            pst.setDate(5, sqlTanggalBerangkat);
            pst.setInt(6, kodeRute);

            // Execute the update
            int rowsAffected = pst.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Registration Successful");
                tampilDataRute();
                tampilDataPesawat();
                resetForm();
                autoID();
            } else {
                JOptionPane.showMessageDialog(null, "Registration Failed");
            }
        } catch (SQLException ex) {
            Logger.getLogger(crudPenerbangan.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
        } finally {
            // Close resources in the finally block
            try {
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                Logger.getLogger(crudPenerbangan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        this.hide();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        try {
            // Establish database connection
            con = dbKoneksi.getConnection();

            // Get the selected column name and value
            String id = txtId.getText();

            // Construct the SQL query
            String query = "DELETE FROM penerbangan WHERE kode_pesawat = ?";
            pst = con.prepareStatement(query);
            pst.setString(1, id);

            // Execute the delete query
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Delete Successful");
                // Optionally, you can clear/reset the form or update the table view
                tampilDataPesawat();
                resetForm();
                autoID();
            } else {
                JOptionPane.showMessageDialog(null, "No records deleted. Please check your input.");
            }

        } catch (SQLException ex) {
            Logger.getLogger(crudPenerbangan.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
        } finally {
            // Close resources
            try {
                if (pst != null) pst.close();
                if (con != null) con.close();
            } catch (SQLException ex) {
                Logger.getLogger(crudPenerbangan.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        resetForm();
        autoID();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
    // Get the data from the input fields
String id = txtId.getText();
String nama = txtNama.getText();
java.util.Date tanggalBerangkat = tglBerangkat.getDate();
java.sql.Date sqlTanggalBerangkat = new java.sql.Date(tanggalBerangkat.getTime());
java.sql.Date currentDate = new java.sql.Date(System.currentTimeMillis());
int jumlahKursi = (int) spinJumlahKursi.getValue();
double harga = Double.parseDouble(txtHarga.getText());
int kodeRute = Integer.parseInt(txtRute.getText());

// Validate the input data
if (id.isEmpty() || nama.isEmpty() || jumlahKursi == 0 || harga == 0.0 || kodeRute == 0) {
    JOptionPane.showMessageDialog(null, "Data Tidak Boleh Kosong", "Validasi Data", JOptionPane.INFORMATION_MESSAGE);
    return; // Exit the method if validation fails
}

// Check if the selected date is earlier than the current date
if (sqlTanggalBerangkat.before(currentDate)) {
    JOptionPane.showMessageDialog(null, "Tanggal Berangkat tidak boleh lebih awal dari tanggal sekarang.", "Validasi Data", JOptionPane.INFORMATION_MESSAGE);
    return; // Exit the method if the selected date is earlier than the current date
}

// Update data in the database
try {
    con = dbKoneksi.getConnection();
    pst = con.prepareStatement("UPDATE penerbangan SET nama_pesawat = ?, jumlah_kursi = ?, harga = ?, tanggal_berangkat = ?, kode_rute = ? WHERE kode_pesawat = ?");
    pst.setString(1, nama);
    pst.setInt(2, jumlahKursi);
    pst.setDouble(3, harga);
    pst.setDate(4, sqlTanggalBerangkat);
    pst.setInt(5, kodeRute);
    pst.setString(6, id);

    // Execute the update
    int rowsAffected = pst.executeUpdate();
    if (rowsAffected > 0) {
        JOptionPane.showMessageDialog(null, "Update Successful");
        tampilDataRute();
        tampilDataPesawat();
        resetForm();
        autoID();
    } else {
        JOptionPane.showMessageDialog(null, "Update Failed");
    }
} catch (SQLException ex) {
    Logger.getLogger(crudPenerbangan.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
} finally {
    // Close resources in the finally block
    try {
        if (pst != null) {
            pst.close();
        }
        if (con != null) {
            con.close();
        }
    } catch (SQLException ex) {
        Logger.getLogger(crudPenerbangan.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    }//GEN-LAST:event_btnUpdateActionPerformed

    class MyTableModel extends DefaultTableModel {
    public MyTableModel() {
        super(new Object[]{"Kode Rute", "Asal", "Tujuan", "Waktu Berangkat", "Waktu Tiba"}, 0);
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        return columnIndex == 5 ? Icon.class : super.getColumnClass(columnIndex);
    }
}
    
      class MyTableModelTerbang extends DefaultTableModel {
    public MyTableModelTerbang() {
        super(new Object[]{"Kode Pesawat", "Nama Pesawat", "Jumlah Kursi", "Harga","Tanggal Berangkat", "Kode Rute"}, 0);
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        return columnIndex == 6 ? Icon.class : super.getColumnClass(columnIndex);
    }
}
    

private void tampilDataRute() {
    Logger logger = Logger.getLogger(crudPenerbangan.class.getName());

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        String columnName = (String) cmbCari.getSelectedItem();
        String columnValue = txtCari.getText();

        con = dbKoneksi.getConnection();
        logger.info("Database connection established successfully.");

        String query = "SELECT * FROM rute";
        if (!columnValue.isEmpty()) {
            query += " WHERE " + columnName + (columnName.equals("kode_rute") ? " = ?" : " LIKE ?");
            if (!columnName.equals("kode_rute")) {
                columnValue = "%" + columnValue + "%";
            }
        }

        pst = con.prepareStatement(query);
        if (!columnValue.isEmpty()) {
            pst.setString(1, columnValue);
        }
        rs = pst.executeQuery();
        logger.info("Query executed successfully.");

        // Populate table with retrieved data
        MyTableModel model = new MyTableModel();

        while (rs.next()) {
            Object[] data = {
                rs.getString(1),
                rs.getString(2),
                rs.getString(3),
                rs.getTime(4),
                rs.getTime(5)
            };
            model.addRow(data);
        }
        logger.info("Rows added to the table.");

        tbRute.setModel(model);
        logger.info("Table model set successfully.");
    } catch (SQLException ex) {
        logger.log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (con != null) dbKoneksi.closeConnection();
            logger.info("Database resources closed successfully.");
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }
}

private void tampilDataPesawat() {
    Logger logger = Logger.getLogger(crudPenerbangan.class.getName());

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        String columnName = (String) cmbCariPesawat.getSelectedItem();
        String columnValue = txtCariPesawat.getText();

        con = dbKoneksi.getConnection();
        logger.info("Database connection established successfully.");

        String query = "SELECT * FROM penerbangan";

        // Check if the selected column is 'tanggal_berangkat' and a date is selected for filtering
        if ("tanggal_berangkat".equals(columnName) && tanggalCari.getDate() != null) {
            query += " WHERE tanggal_berangkat = ?";
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            columnValue = sdf.format(tanggalCari.getDate());
        } else if (!columnValue.isEmpty()) {
            // If a specific column is selected for filtering and the search input is not empty
            query += " WHERE " + columnName + (columnName.equals("kode_pesawat") ? " = ?" : " LIKE ?");
            if (!columnName.equals("kode_pesawat")) {
                columnValue = "%" + columnValue + "%";
            }
        }

        pst = con.prepareStatement(query);
        if (!columnValue.isEmpty()) {
            pst.setString(1, columnValue);
        }
        rs = pst.executeQuery();
        logger.info("Query executed successfully.");
        

        // Populate table with retrieved data
        MyTableModelTerbang model = new MyTableModelTerbang();

        while (rs.next()) {
            Object[] data = {
                rs.getString("kode_pesawat"),
                rs.getString("nama_pesawat"),
                rs.getInt("jumlah_kursi"),
                rs.getDouble("harga"),
                rs.getDate("tanggal_berangkat"),
                rs.getInt("kode_rute")
            };
            model.addRow(data);
        }
        logger.info("Rows added to the table.");

        tbTerbang.setModel(model);
        logger.info("Table model set successfully.");
        tanggalCari.setDate(null);
    } catch (SQLException ex) {
        logger.log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (con != null) con.close();
            logger.info("Database resources closed successfully.");
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }
}

    

private void prepareCmbRute() {
    try {
        // Establish database connection
        con = dbKoneksi.getConnection();
        // Create a SQL statement to retrieve data from the database
        String query = "SELECT * FROM rute";
        pst = con.prepareStatement(query);

        // Execute the query
        ResultSet rs = pst.executeQuery();

        // Clear existing items in the combo box
        cmbCari.removeAllItems();

        // Get the metadata of the ResultSet to retrieve column names
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        // Add column names as items to the combo box
        for (int i = 1; i <= columnCount - 1; i++) {
            cmbCari.addItem(metaData.getColumnName(i));
        }

        // Close resources
        rs.close();
        pst.close();
        con.close();
    } catch (SQLException ex) {
        // Handle SQL exception
        ex.printStackTrace();
    }
}
private void prepareCmbTerbang() {
    try {
        // Establish database connection
        con = dbKoneksi.getConnection();
        // Create a SQL statement to retrieve data from the database
        String query = "SELECT * FROM penerbangan";
        pst = con.prepareStatement(query);

        // Execute the query
        ResultSet rs = pst.executeQuery();

        // Clear existing items in the combo box
        cmbCariPesawat.removeAllItems();

        // Get the metadata of the ResultSet to retrieve column names
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        // Add column names as items to the combo box
        for (int i = 1; i <= columnCount - 1; i++) {
            cmbCariPesawat.addItem(metaData.getColumnName(i));
        }

        // Close resources
        rs.close();
        pst.close();
        con.close();
    } catch (SQLException ex) {
        // Handle SQL exception
        ex.printStackTrace();
    }
}


    
    private void autoID() {
    try {
        Connection con = dbKoneksi.getConnection();
        Statement s = con.createStatement();
        ResultSet rs = s.executeQuery("SELECT MAX(kode_pesawat) FROM penerbangan");

        rs.next();
        int maxId = rs.getInt("MAX(kode_pesawat)");

        // Increment the maxId obtained from the database
        maxId++;

        // Set the incremented ID to the txtId JLabel
        txtId.setText(String.valueOf(maxId));
    } catch (SQLException ex) {
        Logger.getLogger(crudPenerbangan.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    private void resetForm(){
      txtCari.setText("");
      txtNama.setText("");
      spinJumlahKursi.setValue(0);
      java.util.Date currentDate = new java.util.Date(System.currentTimeMillis());
      tglBerangkat.setDate(currentDate);
      txtHarga.setText("");
      txtRute.setText("");

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.demo.BirthdayEvaluator birthdayEvaluator1;
    private com.toedter.calendar.demo.BirthdayEvaluator birthdayEvaluator2;
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnCariPesawat;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbCari;
    private javax.swing.JComboBox<String> cmbCariPesawat;
    private com.toedter.calendar.demo.DateChooserPanelBeanInfo dateChooserPanelBeanInfo1;
    private com.toedter.calendar.DateUtil dateUtil1;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo1;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo2;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo3;
    private com.toedter.calendar.JDateChooserBeanInfo jDateChooserBeanInfo1;
    private com.toedter.calendar.JDateChooserBeanInfo jDateChooserBeanInfo2;
    private com.toedter.calendar.JDayChooserBeanInfo jDayChooserBeanInfo1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.components.JLocaleChooserBeanInfo jLocaleChooserBeanInfo1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.components.JSpinFieldBeanInfo jSpinFieldBeanInfo1;
    private com.toedter.components.JSpinFieldBeanInfo jSpinFieldBeanInfo2;
    private com.toedter.calendar.JYearChooserBeanInfo jYearChooserBeanInfo1;
    private java.awt.PopupMenu popupMenu1;
    private com.toedter.components.JSpinField spinJumlahKursi;
    private com.toedter.calendar.JDateChooser tanggalCari;
    private javax.swing.JTable tbRute;
    private javax.swing.JTable tbTerbang;
    private com.toedter.calendar.JDateChooser tglBerangkat;
    private java.awt.TextField txtCari;
    private java.awt.TextField txtCariPesawat;
    private javax.swing.JTextField txtHarga;
    private javax.swing.JLabel txtId;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtRute;
    // End of variables declaration//GEN-END:variables
}
