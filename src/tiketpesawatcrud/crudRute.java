package tiketpesawatcrud;

import java.awt.HeadlessException;
import java.sql.*;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import java.util.Date;
import java.sql.PreparedStatement;
import java.awt.Image;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author Durian
 */
public class crudRute extends javax.swing.JInternalFrame {
//private JSpinner startTimeSpinner;
//private JSpinner endTimeSpinner;
//
//private void addTimeChoosers() {
//    startTimeSpinner = createTimeSpinner();
//    endTimeSpinner = createTimeSpinner();
//
//    // Assuming you have panels for each spinner
//    this.startTimePanel.add(startTimeSpinner);
//    this.endTimePanel.add(endTimeSpinner);
//}
//
//private JSpinner createTimeSpinner() {
//    SpinnerDateModel model = new SpinnerDateModel();
//    model.setCalendarField(Calendar.HOUR_OF_DAY);
//    JSpinner spinner = new JSpinner(model);
//    JSpinner.DateEditor editor = new JSpinner.DateEditor(spinner, "HH:mm:ss");
//    spinner.setEditor(editor);
//    return spinner;
//}
//
//
//private String getTimeFromSpinner(JSpinner spinner) {
//    Date spinnerValue = (Date) spinner.getValue();
//    SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
//    return formatter.format(spinnerValue);
//}

    /**
     * Creates new form addCustomer
     */
    public crudRute() {
        initComponents();
//        addTimeChoosers();
        autoID();
        tampilDataRute();
        prepareCmb();
    }
    
    koneksi dbKoneksi = new koneksi();

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
 
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        popupMenu1 = new java.awt.PopupMenu();
        jSpinFieldBeanInfo1 = new com.toedter.components.JSpinFieldBeanInfo();
        jSpinFieldBeanInfo2 = new com.toedter.components.JSpinFieldBeanInfo();
        dateUtil1 = new com.toedter.calendar.DateUtil();
        dateChooserPanelBeanInfo1 = new com.toedter.calendar.demo.DateChooserPanelBeanInfo();
        birthdayEvaluator1 = new com.toedter.calendar.demo.BirthdayEvaluator();
        birthdayEvaluator2 = new com.toedter.calendar.demo.BirthdayEvaluator();
        jDateChooserBeanInfo1 = new com.toedter.calendar.JDateChooserBeanInfo();
        jYearChooserBeanInfo1 = new com.toedter.calendar.JYearChooserBeanInfo();
        jLocaleChooserBeanInfo1 = new com.toedter.components.JLocaleChooserBeanInfo();
        jCalendarBeanInfo1 = new com.toedter.calendar.JCalendarBeanInfo();
        jCalendarBeanInfo2 = new com.toedter.calendar.JCalendarBeanInfo();
        jDateChooserBeanInfo2 = new com.toedter.calendar.JDateChooserBeanInfo();
        jDayChooserBeanInfo1 = new com.toedter.calendar.JDayChooserBeanInfo();
        jCalendarBeanInfo3 = new com.toedter.calendar.JCalendarBeanInfo();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnTambah = new javax.swing.JButton();
        txtId = new javax.swing.JLabel();
        localeAsal = new com.toedter.components.JLocaleChooser();
        localeTujuan = new com.toedter.components.JLocaleChooser();
        jLabel7 = new javax.swing.JLabel();
        txtWaktuDatang = new javax.swing.JTextField();
        txtWaktuTiba = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbRute = new javax.swing.JTable();
        cmbCari = new javax.swing.JComboBox<>();
        txtCari = new java.awt.TextField();
        btnCari = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        popupMenu1.setLabel("popupMenu1");

        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("CRUD RUTE");

        jLabel3.setText("Asal");

        jLabel4.setText("Tujuan");

        jLabel5.setText("Waktu Kedatangan");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        txtId.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtId.setText("jLabel7");

        jLabel7.setText("Waktu Tiba");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnTambah)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtId)
                                .addGap(87, 87, 87))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(59, 59, 59))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(localeTujuan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(localeAsal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtWaktuDatang)
                            .addComponent(txtWaktuTiba))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(btnExit)
                .addGap(23, 23, 23))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnExit, btnHapus, btnReset, btnUpdate});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {localeAsal, localeTujuan});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localeAsal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localeTujuan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWaktuDatang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWaktuTiba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(111, 111, 111)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(117, 117, 117))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnExit, btnHapus, btnReset, btnUpdate});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtWaktuDatang, txtWaktuTiba});

        jPanel2.setBackground(new java.awt.Color(0, 102, 255));

        tbRute.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Kode Rute", "Asal", "Tujuan", "Waktu Datang ", "Waktu Tiba"
            }
        ));
        tbRute.setRowHeight(40);
        tbRute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbRuteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbRute);

        cmbCari.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "kode_rute", "nama" }));
        cmbCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCariActionPerformed(evt);
            }
        });

        txtCari.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariActionPerformed(evt);
            }
        });

        btnCari.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCari.setText("Cari");
        btnCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Cari Data");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(cmbCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCari)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCari)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCari, cmbCari, txtCari});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
    resetForm();
      autoID();

    }//GEN-LAST:event_btnResetActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
     // TODO add your handling code here:
    
        String id = txtId.getText();
        String asal = (String)localeAsal.getSelectedItem();
        String tujuan = (String)localeTujuan.getSelectedItem();
        String waktuDatang = txtWaktuDatang.getText(); // Replace textField with your actual JTextField variable
        String waktuTb = txtWaktuTiba.getText(); // Replace textField with your actual JTextField variable

   

    try {
          con = dbKoneksi.getConnection();

        // If path is empty, user hasn't selected a new photo
        pst = con.prepareStatement("UPDATE rute SET asal = ?, tujuan = ?, waktu_kedatangan = ?, waktu_tiba = ? WHERE kode_rute = ?");
        pst.setString(1, asal);
        pst.setString(2, tujuan);
        pst.setString(3, waktuDatang);
        pst.setString(4, waktuTb);
        pst.setString(5, id);


    // Execute the update
    int rowsAffected = pst.executeUpdate();

    if (rowsAffected > 0) {
        JOptionPane.showMessageDialog(null, "Update Successful");
            tampilDataRute();
             resetForm();
            autoID();
    } else {
        JOptionPane.showMessageDialog(null, "Update Failed");
    }
} catch (SQLException ex) {
    Logger.getLogger(crudRute.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
} finally {
    try {

        if (pst != null) {
            pst.close();
        }
        if (con != null) {
            con.close();
        }
    } catch (SQLException ex) {
        Logger.getLogger(crudRute.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCariActionPerformed

    private void btnCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariActionPerformed

        tampilDataRute();
    }//GEN-LAST:event_btnCariActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
try {
    // Establish database connection
    con = dbKoneksi.getConnection();

    // Get the selected column name and value
    String id = txtId.getText();

    // Construct the SQL query
    String query = "DELETE FROM rute WHERE kode_rute = ?";
    pst = con.prepareStatement(query);
    pst.setString(1, id);

    // Execute the delete query
    int rowsAffected = pst.executeUpdate();

    if (rowsAffected > 0) {
        JOptionPane.showMessageDialog(null, "Delete Successful");
        // Optionally, you can clear/reset the form or update the table view
        tampilDataRute();
        resetForm(); 
        autoID();
    } else {
        JOptionPane.showMessageDialog(null, "No records deleted. Please check your input.");
    }

} catch (SQLException ex) {
    Logger.getLogger(crudRute.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
} finally {
    // Close resources
    try {
        if (pst != null) pst.close();
        if (con != null) con.close();
    } catch (SQLException ex) {
        Logger.getLogger(crudRute.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
          this.hide();
    }//GEN-LAST:event_btnExitActionPerformed

    private void cmbCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCariActionPerformed
     
    }//GEN-LAST:event_cmbCariActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
            String id = txtId.getText();
            String asal = (String)localeAsal.getSelectedItem();
            String tujuan = (String)localeTujuan.getSelectedItem();
            String waktuDatang = txtWaktuDatang.getText(); // Replace textField with your actual JTextField variable
            String waktuTb = txtWaktuTiba.getText(); // Replace textField with your actual JTextField variable

        // Define the date format expected from the text field
        SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm"); // Adjust the format based on your input
           
            if(id.equals("") || asal.equals("") || tujuan.equals("") || waktuDatang.equals("")|| waktuTb.equals("")){
             JOptionPane.showMessageDialog(null, "Data Tidak Boleh Kosong", "Validasi Data", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            
        try {
 
            con = dbKoneksi.getConnection();
            pst =  con.prepareStatement("insert into rute(kode_rute,asal,tujuan,waktu_kedatangan,waktu_tiba)values(?,?,?,?,?)");
            
                try {
                        pst.setString(1, id);
                        pst.setString(2, asal);
                        pst.setString(3, tujuan);
                        pst.setString(4, waktuDatang);
                        pst.setString(5, waktuTb);
                    // Execute the update
                    int rowsAffected = pst.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "Registration Successful");
                            tampilDataRute();
                            resetForm();
                            autoID();
                    } else {
                        JOptionPane.showMessageDialog(null, "Registration Failed");
                    }
                    // Close the FileInputStream after using it
                    // Optionally, you can clear the JTextFields or reset the form after the insert
                    // clearForm(); // Implement this method to clear/reset your form fields

} catch (SQLException ex) {
    Logger.getLogger(crudRute.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
}
} catch(HeadlessException e){
 JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
 }          catch (SQLException ex) {
                Logger.getLogger(crudRute.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void tbRuteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbRuteMouseClicked
//try (Connection con = dbKoneksi.getConnection();
//     PreparedStatement pst = con.prepareStatement("SELECT kode_rute, asal, tujuan, waktu_kedatangan, waktu_tiba FROM pembeli WHERE id = ?")) {
//    int selectedRow = tbRute.getSelectedRow();
//    if (selectedRow >= 0) {
//        String id = tbRute.getValueAt(selectedRow, 0).toString();
//        pst.setString(1, id);
//        
//        try (ResultSet rs = pst.executeQuery()) {
//            if (rs.next()) {
//                txtId.setText(tbKamar.getValueAt(tbKamar.getSelectedRow(), 0).toString());
//                txtId.setText(kode);
//                String cmbAsal = tbRute.getValueAt(tbRute.getSelectedRow(), 1).toString();
//               for (int i = 0; i < localeAsal.getItemCount(); i++) {
//                 if (localeAsal.getItemAt(i).equals(cmbAsal)) {
//                  // Set the combo box to the matching item
//                  localeAsal.setSelectedIndex(i);
//                 break; // Exit the loop once the matching item is found
//            }
//             }
//      String cmbTujuan = tbRute.getValueAt(tbRute.getSelectedRow(), 1).toString();
//    for (int i = 0; i < localeTujuan.getItemCount(); i++) {
//    if (localeTujuan.getItemAt(i).equals(cmbTujuan)) {
//        // Set the combo box to the matching item
//        localeTujuan.setSelectedIndex(i);
//        break; // Exit the loop once the matching item is found
//    }
//  }
//            } else {
//                JOptionPane.showMessageDialog(this, "No data found for the selected ID.");
//            }
//        }
//    } else {
//        JOptionPane.showMessageDialog(this, "Please select a row to view details.");
//    }
//} catch (SQLException e) {
//    e.printStackTrace(); // Handle or log the exception appropriately
//}
int selectedRow = tbRute.getSelectedRow();
if (selectedRow >= 0) {
    // Get data from tbRute
    String id = tbRute.getValueAt(selectedRow, 0).toString();
    String cmbAsal = tbRute.getValueAt(selectedRow, 1).toString();
    String cmbTujuan = tbRute.getValueAt(selectedRow, 2).toString();
    String waktuDatang = tbRute.getValueAt(selectedRow, 3).toString();
    String waktuTb = tbRute.getValueAt(selectedRow, 4).toString();

    // Set data to txtId, txtKode, localeAsal, localeTujuan
    txtId.setText(id);
    
    // Set selected index for localeAsal
    for (int i = 0; i < localeAsal.getItemCount(); i++) {
        if (localeAsal.getItemAt(i).equals(cmbAsal)) {
            localeAsal.setSelectedIndex(i);
            break;
        }
    }
    
    // Set selected index for localeTujuan
    for (int i = 0; i < localeTujuan.getItemCount(); i++) {
        if (localeTujuan.getItemAt(i).equals(cmbTujuan)) {
            localeTujuan.setSelectedIndex(i);
            break;
        }
    }
    txtWaktuDatang.setText(waktuDatang);
    txtWaktuTiba.setText(waktuTb);

} else {
    JOptionPane.showMessageDialog(this, "Please select a row to view details.");
}

    }//GEN-LAST:event_tbRuteMouseClicked

    class MyTableModel extends DefaultTableModel {
    public MyTableModel() {
        super(new Object[]{"Kode Rute", "Asal", "Tujuan", "Waktu Kedatangan", "Waktu Tiba"}, 0);
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        return columnIndex == 5 ? Icon.class : super.getColumnClass(columnIndex);
    }
}
    
    private Icon createImageIcon(byte[] bytes, int width, int height) {
    if (bytes == null) {
        return null;
    }
    return new ImageIcon(new ImageIcon(bytes).getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH));
}
    
   private void tampilDataRute() {
    Logger logger = Logger.getLogger(crudRute.class.getName());

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        String columnName = "";
        String columnValue = txtCari.getText();

        if (cmbCari.getSelectedItem().equals("kode_rute")) {
             columnName = "kode_rute";
    } else if (cmbCari.getSelectedItem().equals("asal")) {
             columnName = "asal";
    } else if (cmbCari.getSelectedItem().equals("tujuan")) {
             columnName = "tujuan";
    } else if (cmbCari.getSelectedItem().equals("waktu_kedatangan")) {
             columnName = "waktu_kedatangan";
    } else if (cmbCari.getSelectedItem().equals("waktu_tiba")) {
             columnName = "waktu_tiba";
    } else {
    // Handle the case when none of the predefined options are selected
    }

        con = dbKoneksi.getConnection();
        logger.info("Database connection established successfully.");

        String query = "SELECT * FROM rute";
        if (!columnValue.isEmpty()) {
            query += " WHERE " + columnName + (columnName.equals("kode_rute") ? " = ?" : " LIKE ?");
            if (!columnName.equals("kode_rute")) {
                columnValue = "%" + columnValue + "%";
            }
        }

        pst = con.prepareStatement(query);
        if (!columnValue.isEmpty()) {
            pst.setString(1, columnValue);
        }
        rs = pst.executeQuery();
        logger.info("Query executed successfully.");

        // Populate table with retrieved data
        MyTableModel model = new MyTableModel();
        int iconWidth = 60; // Set icon width
        int iconHeight = 60; // Set icon height

        while (rs.next()) {
            Object[] data = {
                rs.getString("kode_rute"),
                rs.getString("asal"),
                rs.getString("tujuan"),
                rs.getString("waktu_kedatangan"),
                rs.getString("waktu_tiba"),
            };
            model.addRow(data);
        }
        logger.info("Rows added to the table.");

        tbRute.setModel(model);
        logger.info("Table model set successfully.");
    } catch (SQLException ex) {
        logger.log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (con != null) con.close();
            logger.info("Database resources closed successfully.");
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }
}

   

private void prepareCmb() {
    try {
        // Establish database connection
        con = dbKoneksi.getConnection();
        // Create a SQL statement to retrieve data from the database
        String query = "SELECT * FROM rute";
        pst = con.prepareStatement(query);

        // Execute the query
        ResultSet rs = pst.executeQuery();

        // Clear existing items in the combo box
        cmbCari.removeAllItems();

        // Get the metadata of the ResultSet to retrieve column names
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        // Add column names as items to the combo box
        for (int i = 1; i <= columnCount - 1; i++) {
            cmbCari.addItem(metaData.getColumnName(i));
        }

        // Close resources
        rs.close();
        pst.close();
        con.close();
    } catch (SQLException ex) {
        // Handle SQL exception
        ex.printStackTrace();
    }
}



    
    private void autoID() {
    try {
        Connection con = dbKoneksi.getConnection();
        Statement s = con.createStatement();
        ResultSet rs = s.executeQuery("SELECT MAX(kode_rute) FROM rute");

        rs.next();
        int maxId = rs.getInt("MAX(kode_rute)");

        // Increment the maxId obtained from the database
        maxId++;

        // Set the incremented ID to the txtId JLabel
        txtId.setText(String.valueOf(maxId));
    } catch (SQLException ex) {
        Logger.getLogger(crudRute.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    private void resetForm(){
      txtCari.setText("");
      localeAsal.setSelectedIndex(1);
      localeTujuan.setSelectedIndex(1);
      txtWaktuDatang.setText("");
      txtWaktuTiba.setText("");

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.demo.BirthdayEvaluator birthdayEvaluator1;
    private com.toedter.calendar.demo.BirthdayEvaluator birthdayEvaluator2;
    private javax.swing.JButton btnCari;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbCari;
    private com.toedter.calendar.demo.DateChooserPanelBeanInfo dateChooserPanelBeanInfo1;
    private com.toedter.calendar.DateUtil dateUtil1;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo1;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo2;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo3;
    private com.toedter.calendar.JDateChooserBeanInfo jDateChooserBeanInfo1;
    private com.toedter.calendar.JDateChooserBeanInfo jDateChooserBeanInfo2;
    private com.toedter.calendar.JDayChooserBeanInfo jDayChooserBeanInfo1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private com.toedter.components.JLocaleChooserBeanInfo jLocaleChooserBeanInfo1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.components.JSpinFieldBeanInfo jSpinFieldBeanInfo1;
    private com.toedter.components.JSpinFieldBeanInfo jSpinFieldBeanInfo2;
    private com.toedter.calendar.JYearChooserBeanInfo jYearChooserBeanInfo1;
    private com.toedter.components.JLocaleChooser localeAsal;
    private com.toedter.components.JLocaleChooser localeTujuan;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JTable tbRute;
    private java.awt.TextField txtCari;
    private javax.swing.JLabel txtId;
    private javax.swing.JTextField txtWaktuDatang;
    private javax.swing.JTextField txtWaktuTiba;
    // End of variables declaration//GEN-END:variables
}
