package tiketpesawatcrud;

import java.awt.HeadlessException;
import java.sql.*;
import java.sql.PreparedStatement;
import java.awt.Image;
import java.awt.image.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.*;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */

/**
 *
 * @author Durian
 */
public class crudCustomer extends javax.swing.JInternalFrame {

    /**
     * Creates new form addCustomer
     */
    public crudCustomer() {
        initComponents();
        autoID();
        tampilDataCustomer();
        prepareCmb();
    }
    
    koneksi dbKoneksi = new koneksi();

    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    String path = null;
    byte[] userimage = null;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        popupMenu1 = new java.awt.PopupMenu();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNama = new javax.swing.JTextField();
        txtUsia = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAlamat = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        txtTelepon = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txtFoto = new javax.swing.JLabel();
        btnHapus = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnTambah = new javax.swing.JButton();
        txtId = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbCust = new javax.swing.JTable();
        cmbCariCust = new javax.swing.JComboBox<>();
        txtCariCust = new java.awt.TextField();
        btnCariCust = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        popupMenu1.setLabel("popupMenu1");

        jPanel1.setForeground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("CUSTOMER");

        jLabel2.setText("Nama");

        jLabel3.setText("Usia");

        jLabel4.setText("Alamat");

        txtAlamat.setColumns(20);
        txtAlamat.setRows(5);
        jScrollPane1.setViewportView(txtAlamat);

        jLabel5.setText("No. HP");

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        jButton3.setText("Browse");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtFoto.setBackground(new java.awt.Color(51, 51, 51));
        txtFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnTambah.setText("Tambah");
        btnTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahActionPerformed(evt);
            }
        });

        txtId.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        txtId.setText("jLabel7");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtId))
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)
                            .addComponent(txtTelepon, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUsia, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(97, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnTambah)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit)
                .addGap(16, 16, 16))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnExit, btnHapus, btnReset, btnUpdate});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, txtNama, txtTelepon, txtUsia});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtUsia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtTelepon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTambah, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnExit, btnHapus, btnReset, btnUpdate});

        tbCust.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nama", "Usia", "Alamat", "Telepon", "Foto"
            }
        ));
        tbCust.setRowHeight(40);
        tbCust.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbCustMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbCust);

        cmbCariCust.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "id", "nama" }));
        cmbCariCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCariCustActionPerformed(evt);
            }
        });

        txtCariCust.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txtCariCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCariCustActionPerformed(evt);
            }
        });

        btnCariCust.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCariCust.setText("Cari");
        btnCariCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCariCustActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Cari Data");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(cmbCariCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtCariCust, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(btnCariCust)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbCariCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCariCust)
                    .addComponent(txtCariCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCariCust, cmbCariCust, txtCariCust});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
    resetForm();
      autoID();

    }//GEN-LAST:event_btnResetActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
                try {

        JFileChooser pilihFoto = new JFileChooser();
        pilihFoto.showOpenDialog(null);
        File pic = pilihFoto.getSelectedFile();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "png", "jpg", "jpeg");
        pilihFoto.addChoosableFileFilter(filter);
        path = pic.getAbsolutePath();
        BufferedImage img;
        img = ImageIO.read(pilihFoto.getSelectedFile());
        ImageIcon imageIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(120, 120, Image.SCALE_DEFAULT));
            txtFoto.setIcon(imageIcon);
            
        } catch (IOException ex) {
            Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
            
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
     // TODO add your handling code here:
    
    String id = txtId.getText();
    String nama = txtNama.getText();
    String usia = txtUsia.getText();
    String alamat = txtAlamat.getText();
    String telepon = txtTelepon.getText(); 
    FileInputStream fis = null; // Declare the FileInputStream outside the try block

    try {
          con = dbKoneksi.getConnection();

    if (path == null || path.isEmpty()) {
        // If path is empty, user hasn't selected a new photo
        pst = con.prepareStatement("UPDATE pembeli SET nama = ?, usia = ?, alamat = ?, telepon = ? WHERE id = ?");
        pst.setString(1, nama);
        pst.setString(2, usia);
        pst.setString(3, alamat);
        pst.setString(4, telepon);
        pst.setString(5, id);
    } else {
        // If path is not empty, user has selected a new photo
        File image = new File(path);
        fis = new FileInputStream(image);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buff = new byte[1024];
        for (int readNum; (readNum = fis.read(buff)) != -1;) {
            baos.write(buff, 0, readNum);
        }
        byte[] userimage = baos.toByteArray();

        pst = con.prepareStatement("UPDATE pembeli SET nama = ?, usia = ?, alamat = ?, telepon = ?, foto = ? WHERE id = ?");

        // Set the values to the prepared statement
        pst.setString(1, nama);
        pst.setString(2, usia);
        pst.setString(3, alamat);
        pst.setString(4, telepon);
        pst.setBytes(5, userimage); // For BLOB type column 'foto'
        pst.setString(6, id);
    }

    // Execute the update
    int rowsAffected = pst.executeUpdate();

    if (rowsAffected > 0) {
        JOptionPane.showMessageDialog(null, "Update Successful");
            tampilDataCustomer();
             resetForm();
            autoID();
    } else {
        JOptionPane.showMessageDialog(null, "Update Failed");
    }
} catch (SQLException ex) {
    Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
} catch (IOException ex) {
    Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
} finally {
    try {
        if (fis != null) {
            fis.close();
        }
        if (pst != null) {
            pst.close();
        }
        if (con != null) {
            con.close();
        }
    } catch (IOException | SQLException ex) {
        Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtCariCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCariCustActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCariCustActionPerformed

    private void btnCariCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCariCustActionPerformed

        tampilDataCustomer();
    }//GEN-LAST:event_btnCariCustActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
try {
    // Establish database connection
    con = dbKoneksi.getConnection();

    // Get the selected column name and value
    String id = txtId.getText();

    // Construct the SQL query
    String query = "DELETE FROM pembeli WHERE id = ?";
    pst = con.prepareStatement(query);
    pst.setString(1, id);

    // Execute the delete query
    int rowsAffected = pst.executeUpdate();

    if (rowsAffected > 0) {
        JOptionPane.showMessageDialog(null, "Delete Successful");
        // Optionally, you can clear/reset the form or update the table view
        tampilDataCustomer();
        resetForm(); 
        autoID();
    } else {
        JOptionPane.showMessageDialog(null, "No records deleted. Please check your input.");
    }

} catch (SQLException ex) {
    Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
} finally {
    // Close resources
    try {
        if (pst != null) pst.close();
        if (con != null) con.close();
    } catch (SQLException ex) {
        Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
          this.hide();
    }//GEN-LAST:event_btnExitActionPerformed

    private void cmbCariCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCariCustActionPerformed
     
    }//GEN-LAST:event_cmbCariCustActionPerformed

    private void btnTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahActionPerformed
        // TODO add your handling code here:
        try{ 
            String id = txtId.getText();
            String nama = txtNama.getText();
            String usia = txtUsia.getText();
            String alamat = txtAlamat.getText();
            String telepon = txtTelepon.getText();
           
            if(id.equals("") || nama.equals("") || usia.equals("") || alamat.equals("") || telepon.equals("")){
             JOptionPane.showMessageDialog(null, "Data Tidak Boleh Kosong", "Validasi Data", JOptionPane.INFORMATION_MESSAGE);
            }
            else
            
        try {
 
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/tiketpesawat", "root", "");
            pst =  con.prepareStatement("insert into pembeli(id,nama,usia,alamat,telepon,foto)values(?,?,?,?,?,?)");
            
         File image = new File(path);
                try (FileInputStream fis = new FileInputStream(image)) {
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    byte[] buff = new byte[1024];
                    for(int readNum; (readNum=fis.read(buff)) !=-1;)
                    {
                        baos.write(buff,0,readNum);
                    }          userimage=baos.toByteArray();
                    // Set the values to the prepared statement
                    pst.setString(1, id);
                    pst.setString(2, nama);
                    pst.setString(3, usia);
                    pst.setString(4, alamat);
                    pst.setString(5, telepon);
                    pst.setBytes(6, userimage); // For BLOB type column 'foto'
                    // Execute the update
                    int rowsAffected = pst.executeUpdate();
                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "Registration Successful");
                            tampilDataCustomer();
                            resetForm();
                            autoID();
                    } else {
                        JOptionPane.showMessageDialog(null, "Registration Failed");
                    }
                    // Close the FileInputStream after using it
                    // Optionally, you can clear the JTextFields or reset the form after the insert
                    // clearForm(); // Implement this method to clear/reset your form fields
                }

} catch (SQLException ex) {
    Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
} catch (ClassNotFoundException | IOException ex) {
    Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
    JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
}
} catch(HeadlessException e){
 JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
 }
    }//GEN-LAST:event_btnTambahActionPerformed

    private void tbCustMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbCustMouseClicked
 try (Connection con = dbKoneksi.getConnection();
     PreparedStatement pst = con.prepareStatement("SELECT foto FROM pembeli WHERE id = ?")) {
    int selectedRow = tbCust.getSelectedRow();
    if (selectedRow >= 0) {
        // Retrieve data from each column in the selected row
        String id = tbCust.getValueAt(selectedRow, 0).toString();
        String nama = tbCust.getValueAt(selectedRow, 1).toString();
        String usia = tbCust.getValueAt(selectedRow, 2).toString();
        String alamat = tbCust.getValueAt(selectedRow, 3).toString();
        String telepon = tbCust.getValueAt(selectedRow, 4).toString();


        pst.setString(1, id);
        try (ResultSet rs = pst.executeQuery()) {
            if (rs.next()) {
                Blob fotoBlob = rs.getBlob("foto");
                byte[] fotoBytes = fotoBlob.getBytes(1, (int) fotoBlob.length());

                // Set the retrieved data to the corresponding input fields
                txtId.setText(id);
                txtNama.setText(nama);
                txtAlamat.setText(alamat);
                txtTelepon.setText(telepon);
                txtUsia.setText(usia);
                
            ImageIcon image = new ImageIcon(fotoBytes);
            Image im = image.getImage();
            Image myImg = im.getScaledInstance(txtFoto.getWidth(), txtFoto.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon selectImage = new ImageIcon(myImg);
                txtFoto.setIcon(selectImage);
                dbKoneksi.closeConnection();
            } else {
                JOptionPane.showMessageDialog(this, "No data found for the selected row.");
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a row to view details.");
    }
} catch (SQLException e) {
    // Handle SQL exceptions
    e.printStackTrace(); // Log or handle the exception according to your application's requirements
}


    }//GEN-LAST:event_tbCustMouseClicked

    class MyTableModel extends DefaultTableModel {
    public MyTableModel() {
        super(new Object[]{"ID", "Nama", "Usia", "Alamat", "Telepon", "Foto"}, 0);
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {
        return columnIndex == 5 ? Icon.class : super.getColumnClass(columnIndex);
    }
}
    
    private Icon createImageIcon(byte[] bytes, int width, int height) {
    if (bytes == null) {
        return null;
    }
    return new ImageIcon(new ImageIcon(bytes).getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH));
}
    
   private void tampilDataCustomer() {
    Logger logger = Logger.getLogger(crudCustomer.class.getName());

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        String columnName = "";
        String columnValue = txtCariCust.getText();

        if (cmbCariCust.getSelectedItem().equals("id")) {
             columnName = "id";
    } else if (cmbCariCust.getSelectedItem().equals("nama")) {
             columnName = "nama";
    } else if (cmbCariCust.getSelectedItem().equals("usia")) {
             columnName = "usia";
    } else if (cmbCariCust.getSelectedItem().equals("alamat")) {
             columnName = "alamat";
    } else if (cmbCariCust.getSelectedItem().equals("telepon")) {
             columnName = "telepon";
    } else {
    // Handle the case when none of the predefined options are selected
    }

        con = dbKoneksi.getConnection();
        logger.info("Database connection established successfully.");

        String query = "SELECT * FROM pembeli";
        if (!columnValue.isEmpty()) {
            query += " WHERE " + columnName + (columnName.equals("id") ? " = ?" : " LIKE ?");
            if (!columnName.equals("id")) {
                columnValue = "%" + columnValue + "%";
            }
        }

        pst = con.prepareStatement(query);
        if (!columnValue.isEmpty()) {
            pst.setString(1, columnValue);
        }
        rs = pst.executeQuery();
        logger.info("Query executed successfully.");

        // Populate table with retrieved data
        MyTableModel model = new MyTableModel();
        int iconWidth = 60; // Set icon width
        int iconHeight = 60; // Set icon height

        while (rs.next()) {
            Object[] data = {
                rs.getString("id"),
                rs.getString("nama"),
                rs.getInt("usia"),
                rs.getString("alamat"),
                rs.getString("telepon"),
                createImageIcon(rs.getBytes("foto"), iconWidth, iconHeight)
            };
            model.addRow(data);
        }
        logger.info("Rows added to the table.");

        tbCust.setModel(model);
        logger.info("Table model set successfully.");
    } catch (SQLException ex) {
        logger.log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "SQL Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pst != null) pst.close();
            if (con != null) con.close();
            logger.info("Database resources closed successfully.");
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }
}

   

private void prepareCmb() {
    try {
        // Establish database connection
        con = dbKoneksi.getConnection();
        // Create a SQL statement to retrieve data from the database
        String query = "SELECT * FROM pembeli";
        PreparedStatement pst = con.prepareStatement(query);

        // Execute the query
        ResultSet rs = pst.executeQuery();

        // Clear existing items in the combo box
        cmbCariCust.removeAllItems();

        // Get the metadata of the ResultSet to retrieve column names
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        // Add column names as items to the combo box
        for (int i = 1; i <= columnCount - 1; i++) {
            cmbCariCust.addItem(metaData.getColumnName(i));
        }

        // Close resources
        rs.close();
        pst.close();
        con.close();
    } catch (SQLException ex) {
        // Handle SQL exception
        ex.printStackTrace();
    }
}



    
    private void autoID() {
    try {
        Connection con = dbKoneksi.getConnection();
        Statement s = con.createStatement();
        ResultSet rs = s.executeQuery("SELECT MAX(id) FROM pembeli");

        rs.next();
        int maxId = rs.getInt("MAX(id)");

        // Increment the maxId obtained from the database
        maxId++;

        // Set the incremented ID to the txtId JLabel
        txtId.setText(String.valueOf(maxId));
    } catch (SQLException ex) {
        Logger.getLogger(crudCustomer.class.getName()).log(Level.SEVERE, null, ex);
    }
}

    private void resetForm(){
      txtCariCust.setText("");
      txtNama.setText("");
      txtUsia.setText("");
      txtAlamat.setText("");
      txtTelepon.setText("");
      txtFoto.setText("");
      txtFoto.setIcon(null);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCariCust;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTambah;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbCariCust;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JTable tbCust;
    private javax.swing.JTextArea txtAlamat;
    private java.awt.TextField txtCariCust;
    private javax.swing.JLabel txtFoto;
    private javax.swing.JLabel txtId;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtTelepon;
    private javax.swing.JTextField txtUsia;
    // End of variables declaration//GEN-END:variables
}
